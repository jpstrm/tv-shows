{"version":3,"sources":["serviceWorker.js","store/reducers/showsReducer.js","store/reducers/rootReducer.js","store/actions/actionTypes.js","components/header/Header.jsx","config/config.js","api/showApi.js","store/actions/showsActions.js","components/search/Search.jsx","components/card/Card.jsx","components/commons/If.jsx","components/shows/detail/ShowImg.jsx","components/shows/ShowList.jsx","components/shows/detail/ShowOverview.jsx","components/shows/detail/ShowEpisodes.jsx","components/shows/detail/ShowDescription.jsx","components/shows/detail/ShowCast.jsx","components/shows/detail/ShowDetail.jsx","App.jsx","main/routes.jsx","index.js"],"names":["Boolean","window","location","hostname","match","INITIAL_STATE","list","search","selected","episode","rootReducer","combineReducers","shows","state","action","type","payload","props","className","title","CONFIG","ShowApi","findById","id","axios","get","then","data","findLastEpisode","_links","previousepisode","href","Promise","resolve","findAll","searchByName","searchValue","map","show","dispatch","image","updateSearch","event","target","value","getState","mapToShow","name","runtime","status","genres","summary","connect","bindActionCreators","placeholder","onChange","e","onKeyPress","key","hasImg","children","test","ShowImg","imageUrl","medium","to","If","src","alt","height","ShowList","this","cardItems","Component","ShowOverview","season","ShowEpisodes","ShowDescription","ShowCast","ShowDetail","params","url","exact","path","App","routing","component","devTools","__REDUX_DEVTOOLS_EXTENSION__","store","applyMiddleware","thunk","multi","promise","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3737cdd1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actions from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n    list: [],\n    search: '',\n    selected: {},\n    episode: {}\n};\n\nexport default function(state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case actions.SHOWS_FETCHED:\n        case actions.SHOWS_SEARCHED:\n            return {\n                ...state,\n                list: action.payload\n            };\n        case actions.SHOWS_SEARCH_CHANGED:\n            return {\n                ...state,\n                search: action.payload\n            };\n        case actions.SHOWS_FIND_ONE:\n            return {\n                ...state,\n                selected: action.payload\n            };\n        case actions.SHOWS_FIND_LAST_EPISODE:\n            return {\n                ...state,\n                episode: action.payload\n            };\n        default:\n            return state;\n    }\n}\n","import showsReducer from './showsReducer';\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({\n    shows: showsReducer\n});\n\nexport default rootReducer;\n","export const SHOWS_FETCHED = 'SHOWS_FETCHED';\nexport const SHOWS_SEARCHED = 'SHOWS_SEARCHED';\nexport const SHOWS_SEARCH_CHANGED = 'SHOWS_SEARCH_CHANGED';\nexport const SHOWS_FIND_ONE = 'SHOWS_FIND_ONE';\nexport const SHOWS_FIND_LAST_EPISODE = 'SHOWS_FIND_LAST_EPISODE';\n\nexport const MOVIES_FETCHED = 'MOVIES_FETCHED_SUCCESSFULLY';\n","import React from 'react';\nimport './Header.css';\n\nexport default (props) => {\n    return (\n        <div className=\"header\">\n            <h1>{ props.title }</h1>\n        </div>\n    );\n}\n","export const CONFIG = {\n    apiUrl: 'http://api.tvmaze.com'\n};\n","import axios from 'axios';\nimport { CONFIG } from '../config/config';\n\nexport default class ShowApi {\n\n    findById = (id) => {\n        return axios.get(`${CONFIG.apiUrl}/shows/${id}`)\n            .then((({data}) => data));\n    };\n\n    findLastEpisode = (_links) => {\n        _links = _links || '';\n        if (_links) {\n            return axios.get(_links.previousepisode.href)\n                .then((({data}) => data));\n        } else {\n            return Promise.resolve({});\n        }\n    };\n\n    findAll = () => {\n        return axios.get(`${CONFIG.apiUrl}/shows`)\n            .then((({data}) => data));\n    };\n\n    searchByName = (searchValue) => {\n        const search = searchValue ? `?q=${searchValue}` : '';\n\n        return axios.get(`${CONFIG.apiUrl}/search/shows${search}`)\n            .then(({data}) => data.map(({show}) => show));\n    };\n\n}\n","import { CONFIG } from '../../config/config';\nimport * as actions from './actionTypes';\nimport axios from 'axios';\nimport ShowApi from '../../api/showApi';\n\n/**\n * TODO Handle findAll with search to avoid conflict\n * @returns {function(...[*]=)}\n */\nexport const findAll = () => {\n    return (dispatch) => {\n        axios.get(`${CONFIG.apiUrl}/shows`)\n            .then(({data}) => {\n                const shows = data.map(({id, image}) => ({id, image}));\n\n                dispatch({\n                    type: actions.SHOWS_FETCHED,\n                    payload: shows\n                })\n            });\n    }\n};\n\nexport const updateSearch = (event) => {\n    return {\n        type: actions.SHOWS_SEARCH_CHANGED,\n        payload: event.target.value\n    };\n};\n\nexport const searchByName = () => {\n    return (dispatch, getState) => {\n        const searchValue = getState().shows.search;\n\n        new ShowApi().searchByName(searchValue)\n            .then(data => {\n                const shows = data.map(mapToShow);\n                dispatch({\n                    type: actions.SHOWS_SEARCHED,\n                    payload: shows\n                });\n            });\n    }\n};\n\nexport const findById = (id) => {\n    return (dispatch) => {\n        new ShowApi().findById(id).then(show => {\n            dispatch({\n                type: actions.SHOWS_FIND_ONE,\n                payload: show\n            })\n        });\n    }\n};\n\nexport const findLastEpisode = () => {\n    return (dispatch, getState) => {\n        const { _links } = getState().shows.selected;\n\n        new ShowApi().findLastEpisode(_links).then(show => {\n            dispatch({\n                type: actions.SHOWS_FIND_LAST_EPISODE,\n                payload: show\n            })\n        });\n    }\n};\n\n\nconst mapToShow = (show) => (\n    {\n        id: show.id,\n        name: show.name,\n        image: show.image,\n        runtime: show.runtime,\n        status: show.status,\n        type: show.type,\n        genres: show.genres,\n        summary: show.summary,\n        _links: show._links\n    }\n);\n","import React from 'react';\nimport './Search.css';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { searchByName, updateSearch } from '../../store/actions/showsActions';\n\n/**\n * TODO Need added automatically search\n * @param props\n * @returns {*}\n * @constructor\n */\nfunction Search(props) {\n    function keyPressed(event) {\n        if (event.key === 'Enter') {\n            props.updateSearch(event);\n            props.searchByName();\n        }\n    }\n    return (\n        <div className=\"search\">\n            <input type=\"text\" placeholder=\"Search\"\n                   value={props.searchValue}\n                   onChange={e => props.updateSearch(e)}\n                   onKeyPress={e => keyPressed(e)}/>\n        </div>\n    );\n}\n\nconst mapToProps = state => ({ searchValue: state.shows.search });\nconst mapDispatchToProps = dispatch => bindActionCreators({ searchByName, updateSearch }, dispatch);\nexport default connect(mapToProps, mapDispatchToProps)(Search)\n","import React from 'react';\nimport './Card.css';\n\n/**\n * Card can be improved adding style when empty or pre-load image\n * @param props\n * @returns {*}\n */\nexport default (props) => {\n    return (\n        <div className={\"Card \" + (!props.hasImg ? 'no-img' : '')}>\n            {props.children}\n        </div>\n    );\n}\n","export default (props) => {\n\n    if (props.test) {\n        return props.children;\n    } else {\n        return false;\n    }\n};\n","import { Link } from 'react-router-dom';\nimport './ShowImg.css';\nimport If from '../../commons/If';\nimport React from 'react';\n\nexport default function ShowImg(props){\n    const show = props.show || {};\n    const hasImg = !!show.image;\n    const imageUrl = hasImg ? show.image.medium : '';\n\n    return (\n        <Link to={`/shows/detail/${show.id}`}>\n            <If test={hasImg}>\n                <img src={imageUrl}\n                     alt=\"Show\"\n                     height={280}\n                     className={(!hasImg ? 'no-img' : '')}/>\n            </If>\n            <If test={!hasImg}>\n                <p>{show.name}</p>\n            </If>\n        </Link>\n    );\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport './ShowList.css';\nimport { findAll } from '../../store/actions/showsActions';\nimport Card from '../card/Card';\nimport ShowImg from './detail/ShowImg';\n\n/**\n * TODO Add pagination\n */\nclass ShowList extends Component {\n\n    componentDidMount() {\n        this.props.findAll();\n    }\n\n    render() {\n        const shows = this.props.list || [];\n\n        const cardItems = shows.map(show => {\n            return (\n                <Card key={show.id}  hasImg={!!show.image}>\n                    <ShowImg show={show}/>\n                </Card>\n            )\n        });\n\n        return (\n            <div className=\"ShowList\">\n                {cardItems}\n            </div>\n        )\n    }\n}\n\nconst mapToProps = state => ({ list: state.shows.list });\nconst mapDispatchToProps = dispatch => bindActionCreators({ findAll }, dispatch);\nexport default connect(mapToProps, mapDispatchToProps)(ShowList)\n","import React, { Component } from 'react';\nimport './ShowOverview.css';\nimport ShowImg from './ShowImg';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { findLastEpisode } from '../../../store/actions/showsActions';\n\nclass ShowOverview extends Component {\n\n    render() {\n        const { show, episode } = this.props;\n        if (show.id && !episode.id) {\n            this.props.findLastEpisode();\n        }\n\n        return (\n            <div className=\"ShowOverview\">\n                <div className=\"img\">\n                    <ShowImg show={show}/>\n                </div>\n                <div>\n                    <p className=\"title\">{show.name}</p>\n                    <p className=\"season\">Season <strong>{episode.season}</strong></p>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapToProps = state => ({\n    show: state.shows.selected,\n    episode: state.shows.episode,\n});\nconst mapDispatchToProps = dispatch => bindActionCreators({ findLastEpisode }, dispatch);\nexport default connect(mapToProps, mapDispatchToProps)(ShowOverview);\n","import React, { Component } from 'react';\n\nclass ShowEpisodes extends Component {\n\n    render() {\n\n        return (\n            <div>\n                Episodes c\n            </div>\n        );\n    }\n}\n\nexport default ShowEpisodes;\n\n","import React, { Component } from 'react';\n\nclass ShowDescription extends Component {\n\n    render() {\n\n        return (\n            <div>\n                Details c\n            </div>\n        );\n    }\n}\n\nexport default ShowDescription;\n\n","import React, { Component } from 'react';\n\nclass ShowCast extends Component {\n\n    render() {\n\n        return (\n            <div>\n                Cast c\n            </div>\n        );\n    }\n}\n\nexport default ShowCast;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport './ShowDetail.css';\nimport { bindActionCreators } from 'redux';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport { findById } from '../../../store/actions/showsActions';\nimport ShowOverview from './ShowOverview';\nimport ShowEpisodes from './ShowEpisodes';\nimport ShowDescription from './ShowDescription';\nimport ShowCast from './ShowCast';\n\nclass ShowDetail extends Component {\n\n    componentDidMount() {\n        const { id } = this.props.match.params || 1;\n        this.props.findById(id);\n    }\n\n    render() {\n        const show = this.props.show || {};\n        const image = show.image ? show.image.medium : '';\n        const genres = show.genres || [];\n        const url = this.props.match.url;\n\n        return (\n            <div className=\"ShowDetail\">\n                <Switch>\n                    <Route exact path={`${url}`}>\n                        <div className=\"row\">\n                            <ShowOverview/>\n                        </div>\n                    </Route>\n                    <Route exact path={`${url}/overview`}>\n                        <div className=\"row\">\n                            <ShowOverview/>\n                        </div>\n                    </Route>\n                    <Route exact path={`${url}/episodes`}>\n                        <div className=\"row\">\n                            <ShowEpisodes />\n                        </div>\n                    </Route>\n                    <Route exact path={`${url}/details`}>\n                        <div className=\"row\">\n                            <ShowDescription />\n                        </div>\n                    </Route>\n                    <Route exact path={`${url}/cast`}>\n                        <div className=\"row\">\n                            <ShowCast />\n                        </div>\n                    </Route>\n                </Switch>\n                <div className=\"row\">\n                    <div>\n                        <Link to={`${url}/overview`}>Overview</Link>\n                        <Link to={`${url}/episodes`}>Episodes</Link>\n                        <Link to={`${url}/details`}>Details</Link>\n                        <Link to={`${url}/cast`}>Cast</Link>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapToProps = state => ({ show: state.shows.selected });\nconst mapDispatchToProps = dispatch => bindActionCreators({ findById }, dispatch);\nexport default connect(mapToProps, mapDispatchToProps)(ShowDetail);\n","import React from 'react';\nimport './App.css';\nimport Header from './components/header/Header';\nimport Search from './components/search/Search';\nimport ShowList from './components/shows/ShowList';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport ShowDetail from './components/shows/detail/ShowDetail';\n\n/**\n * Missing responsive style\n * @returns {*}\n * @constructor\n */\nfunction App(props) {\n    return (\n        <div className=\"App\">\n            <div className=\"row\">\n                <Link to=\"/\">\n                    <Header title=\"TV Shows & Movies\"/>\n                </Link>\n            </div>\n            <Switch>\n                <Route exact path=\"/\">\n                    <div className=\"row\">\n                        <Search/>\n                    </div>\n                    <div className=\"row\">\n                        <ShowList />\n                    </div>\n                </Route>\n                <Route exact path=\"/shows/detail\">\n                    <div className=\"row\">\n                        <ShowDetail />\n                    </div>\n                </Route>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport App from '../App';\nimport ShowDetail from '../components/shows/detail/ShowDetail';\nimport ShowOverview from '../components/shows/detail/ShowOverview';\nimport ShowEpisodes from '../components/shows/detail/ShowEpisodes';\nimport ShowDescription from '../components/shows/detail/ShowDescription';\nimport ShowCast from '../components/shows/detail/ShowCast';\n\nconst routing = (props) => {\n    return (\n        <Router>\n            <div>\n                <Route path='/' component={App}/>\n                <Route path='/shows/detail/:id' component={ShowDetail}/>\n                <Route path=\"/shows/detail/:id/#overview\"  component={ShowOverview} />\n                <Route path=\"/shows/detail/:id/#episodes\"  component={ShowEpisodes} />\n                <Route path=\"/shows/detail/:id/#details\"  component={ShowDescription} />\n                <Route path=\"/shows/detail/:id/#cast\"  component={ShowCast} />\n            </div>\n        </Router>\n    );\n};\n\nexport default routing;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport promise from 'redux-promise';\nimport multi from 'redux-multi';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './store/reducers/rootReducer';\nimport Router from './main/routes';\n\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION__\n    && window.__REDUX_DEVTOOLS_EXTENSION__();\nconst store = applyMiddleware(thunk, multi, promise)(createStore)(rootReducer, devTools);\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <Router />\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}